openapi: 3.0.2
servers:
  - url: http://127.0.0.1:3000
info:
  description: This is API Doc for Angular+ NodeJS Bulletinboard
  title: Swagger API Doc for Gigger
  version: 1.0.0

tags:
  - name: Authentication
    description: Operations about Authentication
  - name: Interests
    description: Operations about Interests
  - name: Events
    description: Operations about Events
  - name: Artists
    description: Operations about Artists

paths:
  # Auth Routes
  /api/login:
    post:
      tags:
        - Authentication
      summary: Logs user into the system
      security:
        - {}
      requestBody:
        description: Login User into the system
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "user1"
                password:
                  type: string
                  format: password
                  example: "password123"
          application/xml:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user1"
                password:
                  type: string
                  format: password
                  example: "password123"
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "user1"
                password:
                  type: string
                  format: password
                  example: "password123"
      responses:
        "200":
          description: Login Successfully.

  /api/logout:
    get:
      tags:
        - Authentication
      summary: Logs out current logged in user session
      security:
        - {}
      description: ""
      operationId: logoutUser
      parameters:
        - name: userId
          in: header
          description: ID of login UserId
          required: true
          schema:
            type: string
      responses:
        default:
          description: Logout Successfully.

  /api/signup:
    post:
      tags:
        - Authentication
      summary: Sign Up
      security:
        - {}
      requestBody:
        description: Signup user into the system
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "user1"
                email:
                  type: string
                  example: "user1@gmail.com"
                password:
                  type: string
                  format: password
                  example: "password123"
                role:
                  type: number
                  format: number
                  example: 1
                dob:
                  type: string
                  example: "11-02-2004"
                interest:
                  type: json
                  example: [1, 2]
      responses:
        "200":
          description: Signup user Successfully.

  # Interest Routes
  /api/interests:
    get:
      tags:
        - Interests
      summary: Get all interests
      description: This can be used without login user.
      security:
        - {}
      responses:
        "200":
          description: Returns all Interests
        "401":
          $ref: "#/components/responses/UnauthorizedError"
 
  # Event Routes
  /api/v1/events:
    get:
      tags:
        - Events
      summary: Get all Events
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: PageNumber 
          schema:
            type: number
        - name: size
          in: query
          description: Number of users that want to show per Page
          schema:
            type: number
      responses:
        "200":
          description: Returns all Events
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - Events
      summary: Create Event
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: createEvent
      requestBody:
        description: Created event
        content:
          application/json:
            schema:
              type: object
              properties:
                eventName:
                  type: string
                  example: "Pink Floyd Live"
                fromTime:
                  type: string
                  example: "8:00 pm"
                toTime:
                  type: string
                  example: "11:00 pm"
                address:
                  type: string
                  example: "Arena di Verona"
                date:
                  type: string
                  example: "20-07-2023"
                description:
                  type: string
                  example: "Preparazione concerto in piazza di sabato"
                participants:
                  type: json
                  example: [1, 2, 3]
                beforeReminder:
                  type: string
                  example: "00:30"
                reminderStatus:
                  type: string
                  example: "busy"
                latitude:
                  type: string
                  example: "1.354092790531372"
                longitude:
                  type: string
                  example: "103.87865454226616"
                artists:
                  type: string
                  example: [1, 2, 3]
                color:
                  type: string
                  example: "#fff"
                createdUser:
                  type: number
                  example: 1
          application/xml:
            schema:
              type: object
              properties:
                eventName:
                  type: string
                  example: "Pink Floyd Live"
                fromTime:
                  type: string
                  example: "8:00 pm"
                toTime:
                  type: string
                  example: "11:00 pm"
                address:
                  type: string
                  example: "Arena di Verona"
                date:
                  type: string
                  example: "20-07-2023"
                description:
                  type: string
                  example: "Preparazione concerto in piazza di sabato"
                participants:
                  type: json
                  example: [1, 2, 3]
                beforeReminder:
                  type: string
                  example: "00:30"
                reminderStatus:
                  type: string
                  example: "busy"
                latitude:
                  type: string
                  example: "1.354092790531372"
                longitude:
                  type: string
                  example: "103.87865454226616"
                artists:
                  type: string
                  example: [1, 2, 3]
                color:
                  type: string
                  example: "#fff"
                createdUser:
                  type: number
                  example: 1
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                eventName:
                  type: string
                  example: "Pink Floyd Live"
                fromTime:
                  type: string
                  example: "8:00 pm"
                toTime:
                  type: string
                  example: "11:00 pm"
                address:
                  type: string
                  example: "Arena di Verona"
                date:
                  type: string
                  example: "20-07-2023"
                description:
                  type: string
                  example: "Preparazione concerto in piazza di sabato"
                participants:
                  type: json
                  example: [1, 2, 3]
                beforeReminder:
                  type: string
                  example: "00:30"
                reminderStatus:
                  type: string
                  example: "busy"
                latitude:
                  type: string
                  example: "1.354092790531372"
                longitude:
                  type: string
                  example: "103.87865454226616"
                artists:
                  type: string
                  example: [1, 2, 3]
                color:
                  type: string
                  example: "#fff"
                createdUser:
                  type: number
                  example: 1
      responses:
        "200":
          description: Created event Successfully.
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /api/v1/events/{id}:
    get:
      tags:
        - Events
      summary: Get event by ID
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: getEventById
      parameters:
        - name: id
          in: path
          description: ID of event to return
          required: true
          schema:
            type: string
      responses:
          "200":
            description: Returns all Events
          "401":
            $ref: "#/components/responses/UnauthorizedError"
          "404":
            description: "Event is not found"

  /api/v1/events/update/{id}:
    post:
      tags:
        - Events
      summary: Update a post
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: updateEventById
      parameters:
        - name: id
          in: path
          description: ID of event to return
          required: true
          schema:
            type: string
      operationId: updateEvent
      requestBody:
        description: Updated event
        content:
          application/json:
            schema:
              type: object
              properties:
                eventName:
                  type: string
                  example: "Pink Floyd Live"
                fromTime:
                  type: string
                  example: "8:00 pm"
                toTime:
                  type: string
                  example: "11:00 pm"
                address:
                  type: string
                  example: "Arena di Verona"
                date:
                  type: string
                  example: "20-07-2023"
                description:
                  type: string
                  example: "Preparazione concerto in piazza di sabato"
                participants:
                  type: json
                  example: [1, 2, 3]
                beforeReminder:
                  type: string
                  example: "00:30"
                reminderStatus:
                  type: string
                  example: "busy"
                latitude:
                  type: string
                  example: "1.354092790531372"
                longitude:
                  type: string
                  example: "103.87865454226616"
                artists:
                  type: string
                  example: [1, 2, 3]
                color:
                  type: string
                  example: "#fff"
                createdUser:
                  type: number
                  example: 1
          application/xml:
            schema:
              type: object
              properties:
                eventName:
                  type: string
                  example: "Pink Floyd Live"
                fromTime:
                  type: string
                  example: "8:00 pm"
                toTime:
                  type: string
                  example: "11:00 pm"
                address:
                  type: string
                  example: "Arena di Verona"
                date:
                  type: string
                  example: "20-07-2023"
                description:
                  type: string
                  example: "Preparazione concerto in piazza di sabato"
                participants:
                  type: json
                  example: [1, 2, 3]
                beforeReminder:
                  type: string
                  example: "00:30"
                reminderStatus:
                  type: string
                  example: "busy"
                latitude:
                  type: string
                  example: "1.354092790531372"
                longitude:
                  type: string
                  example: "103.87865454226616"
                artists:
                  type: string
                  example: [1, 2, 3]
                color:
                  type: string
                  example: "#fff"
                createdUser:
                  type: number
                  example: 1
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                eventName:
                  type: string
                  example: "Pink Floyd Live"
                fromTime:
                  type: string
                  example: "8:00 pm"
                toTime:
                  type: string
                  example: "11:00 pm"
                address:
                  type: string
                  example: "Arena di Verona"
                date:
                  type: string
                  example: "20-07-2023"
                description:
                  type: string
                  example: "Preparazione concerto in piazza di sabato"
                participants:
                  type: json
                  example: [1, 2, 3]
                beforeReminder:
                  type: string
                  example: "00:30"
                reminderStatus:
                  type: string
                  example: "busy"
                latitude:
                  type: string
                  example: "1.354092790531372"
                longitude:
                  type: string
                  example: "103.87865454226616"
                artists:
                  type: string
                  example: [1, 2, 3]
                color:
                  type: string
                  example: "#fff"
                createdUser:
                  type: number
                  example: 1
      responses:
        "200":
          description: Event is updated successfully.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Event is not found.

  /api/v1/events/upcoming:
    get:
      tags:
        - Events
      summary: Get upcoming event by ID
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: upcomingEvent
      parameters:
        - name: userId
          in: header
          description: ID of login UserId
          required: true
          schema:
            type: string
      responses:
          "200":
            description: Returns all Events
          "401":
            $ref: "#/components/responses/UnauthorizedError"
          "404":
            description: "Event is not found"    


  # Artist Routes
  /api/v1/artists:
    get:
      tags:
        - Artists
      summary: Get all Artists
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: PageNumber 
          schema:
            type: number
        - name: size
          in: query
          description: Number of users that want to show per Page
          schema:
            type: number
      responses:
        "200":
          description: Returns all Artists
        "401":
          $ref: "#/components/responses/UnauthorizedError"
    post:
      tags:
        - Artists
      summary: Create Artist
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: header
          description: ID of login User.
          required: true
          type: number
      operationId: createArtist
      requestBody:
        description: Created artist
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                artistName:
                  type: string
                  example: "Mario Mix"
                profile:
                  type: string
                  format: binary
                highlight:
                  type: string
                  example: "Professional Sound Engeering"
                address:
                  type: string
                  example: "Via Giolitti"
                description:
                  type: string
                  example: "Lorem ispum dolar sit amet"
                status:
                  type: string
                  example: "available"
                genre:
                  type: string
                  example: [1, 2]
          application/octet-stream:
            schema:
              type: object
              properties:
                artistName:
                  type: string
                  example: "Mario Mix"
                profile:
                  type: string
                  format: binary
                highlight:
                  type: string
                  example: "Professional Sound Engeering"
                address:
                  type: string
                  example: "Via Giolitti"
                description:
                  type: string
                  example: "Lorem ispum dolar sit amet"
                status:
                  type: string
                  example: "available"
                genre:
                  type: string
                  example: [1, 2]
          application/octet-stream:
            schema:
              type: object
              properties:
                artistName:
                  type: string
                  example: "Mario Mix"
                profile:
                  type: string
                  format: binary
                highlight:
                  type: string
                  example: "Professional Sound Engeering"
                address:
                  type: string
                  example: "Via Giolitti"
                description:
                  type: string
                  example: "Lorem ispum dolar sit amet"
                status:
                  type: string
                  example: "available"
      responses:
        "200":
          description: Artist is created successfully.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Artist is created successfully.

  /api/v1/artists/{id}:
    get:
      tags:
        - Artists
      summary: Get artist by ID
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: getArtistById
      parameters:
        - name: id
          in: path
          description: ID of artist to return
          required: true
          schema:
            type: string
      responses:
          "200":
            description: Returns Artist By Id
          "401":
            $ref: "#/components/responses/UnauthorizedError"
          "404":
            description: "Artist is not found"

  /api/v1/artists/{id}:
    post:
      tags:
        - Artists
      summary: Update a artist
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: updateArtistById
      parameters:
        - name: id
          in: path
          description: ID of artist to return
          required: true
          schema:
            type: string
      operationId: updateArtist
      requestBody:
        description: Updated artist
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                artistName:
                  type: string
                  example: "Mario Mix"
                profile:
                  type: string
                  format: binary
                highlight:
                  type: string
                  example: "Professional Sound Engeering"
                address:
                  type: string
                  example: "Via Giolitti"
                description:
                  type: string
                  example: "Lorem ispum dolar sit amet"
                status:
                  type: string
                  example: "available"
                genre:
                  type: string
                  example: [1]
          application/octet-stream:
            schema:
              type: object
              properties:
                artistName:
                  type: string
                  example: "Mario Mix"
                profile:
                  type: string
                  format: binary
                highlight:
                  type: string
                  example: "Professional Sound Engeering"
                address:
                  type: string
                  example: "Via Giolitti"
                description:
                  type: string
                  example: "Lorem ispum dolar sit amet"
                status:
                  type: string
                  example: "available"
          application/octet-stream:
            schema:
              type: object
              properties:
                artistName:
                  type: string
                  example: "Mario Mix"
                profile:
                  type: string
                  format: binary
                highlight:
                  type: string
                  example: "Professional Sound Engeering"
                address:
                  type: string
                  example: "Via Giolitti"
                description:
                  type: string
                  example: "Lorem ispum dolar sit amet"
                status:
                  type: string
                  example: "available"
                genre:
                  type: string
                  example: [1, 2]
      responses:
        "200":
          description: Artist is updated successfully.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Artist is not found.

  /api/v1/artists/update/{id}:
    post:
      tags:
        - Artists
      summary: Update a artist
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: updatArtistById
      parameters:
        - name: id
          in: path
          description: ID of artist to return
          required: true
          schema:
            type: string
      operationId: updateArtist
      requestBody:
        description: Updated artist
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                artistName:
                  type: string
                  example: "Mario Mix"
                profile:
                  type: string
                  format: binary
                highlight:
                  type: string
                  example: "Professional Sound Engeering"
                address:
                  type: string
                  example: "Via Giolitti"
                description:
                  type: string
                  example: "Lorem ispum dolar sit amet"
                status:
                  type: string
                  example: "available"
                genre:
                  type: string
                  example: [1, 2]
          application/octet-stream:
            schema:
              type: object
              properties:
                artistName:
                  type: string
                  example: "Mario Mix"
                profile:
                  type: string
                  format: binary
                highlight:
                  type: string
                  example: "Professional Sound Engeering"
                address:
                  type: string
                  example: "Via Giolitti"
                description:
                  type: string
                  example: "Lorem ispum dolar sit amet"
                status:
                  type: string
                  example: "available"
                genre:
                  type: string
                  example: [1, 2]
          application/octet-stream:
            schema:
              type: object
              properties:
                artistName:
                  type: string
                  example: "Mario Mix"
                profile:
                  type: string
                  format: binary
                highlight:
                  type: string
                  example: "Professional Sound Engeering"
                address:
                  type: string
                  example: "Via Giolitti"
                description:
                  type: string
                  example: "Lorem ispum dolar sit amet"
                status:
                  type: string
                  example: "available"
                genre:
                  type: string
                  example: [1, 2]
      responses:
        "200":
          description: Artist is updated successfully.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Artist is not found.

  #userRoute
  /api/v1/users/top/video/list:
    get:
      tags:
        - Users
      summary: Get all Videos
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: header
          description: login UserId 
          schema:
            type: number
        - name: page
          in: query
          description: PageNumber 
          schema:
            type: number
        - name: size
          in: query
          description: Number of users that want to show per Page
          schema:
            type: number
      responses:
        "200":
          description: Returns all Videos
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /api/v1/users/video/list:
    get:
      tags:
        - Users
      summary: Get all Videos
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: PageNumber 
          schema:
            type: number
        - name: size
          in: query
          description: Number of users that want to show per Page
          schema:
            type: number
      responses:
        "200":
          description: Returns all Videos
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /api/v1/users/upload/video:
    post:
      tags:
        - Users
      summary: Upload User Video
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: uploadUserVideo
      parameters:
        - name: userId
          in: header
          description: uploaded userId
          required: true
          schema:
            type: string
      operationId: uploadUserVideo
      requestBody:
        description: Upload User Video
        content:
          multipart/form-data::
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Dancer in my Video!"
                description:
                  type: string
                  example: "Become a dancer in my crew for the new album"
                video:
                  type: string
                  format: binary
          application/octet-stream:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Dancer in my Video!"
                description:
                  type: string
                  example: "Become a dancer in my crew for the new album"
                video:
                  type: string
                  format: binary
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Dancer in my Video!"
                description:
                  type: string
                  example: "Become a dancer in my crew for the new album"
                video:
                  type: string
                  format: binary
      responses:
        "200":
          description: User Video is uploaded successfully.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: API is not found.


  /api/v1/users/video/{id}/like:
    get:
      tags:
        - Users
      summary: User like video
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: userLikeVideo
      parameters:
        - name: id
          in: path
          description: videoId
          required: true
          schema:
            type: string
        - name: userId
          in: header
          description: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User like video status is successfully added.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Video is not found.

  /api/v1/users/video/{id}/view:
    get:
      tags:
        - Users
      summary: User view video
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: userViewVideo
      parameters:
        - name: id
          in: path
          description: videoId
          required: true
          schema:
            type: string
        - name: userId
          in: header
          description: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User view video status is successfully added.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Video is not found.

  /api/v1/users/video/{id}/unlike:
    get:
      tags:
        - Users
      summary: User unlike video
      description: This can only be done by the logged in user.
      security:
        - bearerAuth: []
      operationId: userUnlikeVideo
      parameters:
        - name: videoId
          in: path
          description: videoId
          required: true
          schema:
            type: string
        - name: userId
          in: header
          description: userId
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User unlike video status successfully.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          description: Video is not found.
components:
  # Schema Usage in component
  # schemas:
  #   Post:
  #     type: object
  #     properties:
  #       title:
  #         type: string
  #         example: "Post01"
  #       description:
  #         type: string
  #         example: "Description01"
  #       status:
  #         type: boolean
  #         example: true
  #       created_user_id:
  #         type: string
  #         example: "62fde243b554f4955fdf7914"
  #     xml:
  #       name: post
  #   User:
  #     type: object
  #     properties:
  #       name:
  #         type: string
  #         example: "Post01"
  #       email:
  #         type: string
  #         example: "Description01"
  #       password:
  #         type: string
  #         format: password
  #         example: "password123"
  #       type:
  #         type: string
  #         description: User Roles
  #         enum:
  #           - Admin
  #           - User
  #       phone:
  #         type: string
  #         example: "0912345678"
  #       dob:
  #         type: string
  #         format: date
  #         example: 2022-06-30
  #       address:
  #         type: string
  #         example: "Address"
  #       profile:
  #         type: string
  #         example: "apiuploads/0fe05c06-2f9d-4056-b80d-ffa37dee7c93_img1.jpg"
  #     xml:
  #       name: user
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid

# 2) Apply the security globally to all operations
security:
  - bearerAuth: []
